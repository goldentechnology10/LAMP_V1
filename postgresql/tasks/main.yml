---
# tasks file for postgresql


- name: Install dependencies for PostgreSQL
  dnf: name={{ item }} update_cache=true state=latest
  with_items:
     - bash
     - openssl

- name: "Install packages"
  dnf: "name={{ item }} update_cache=true state=present"
  with_items:
        - postgresql
        - postgresql-server 
        - postgresql-contrib
        - python3-psycopg2




- name: "Find out if PostgreSQL is initialized"
  ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
  register: postgres_data

- name: "Initialize PostgreSQL"
  shell: "postgresql-setup initdb"
  when: not postgres_data.stat.exists
 
- name: "Start and enable services"
  service: "name={{ item }} state=started enabled=yes"
  with_items:
        - postgresql



- name: "Create app database"
  postgresql_db:
    state: present
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
  become: yes
  become_user: postgres

- name: Ensure user has access to the new database
  become: true
  become_user: postgres
  postgresql_user: db={{ db_name }}
   name={{ db_user }}
      password={{ db_password }}
      priv=ALL
      state=present


   #- name: "Create db user"
   # postgresql_user:
   #     state: present
   #     name: "{{ db_user }}"
   #     password: "{{ db_password }}"
   #become: yes
   #become_user: postgres

   #- name: "Grant db user access to app db"
   #postgresql_privs:
   #    type: database
   #    database: "{{ db_name }}"
   #    roles: "{{ db_user }}"
   #    grant_option: no
   #    privs: all
   # become: yes
   #become_user: postgres

- name: "Allow md5 connection for the db user"
  postgresql_pg_hba:
    dest: "~/data/pg_hba.conf"
    contype: host
    databases: all
    method: md5
    users: "{{ db_user }}"
    create: true
  become: yes
  become_user: postgres 
  notify: restart postgres

  #- name: The same as above by playbook
  #postgresql_owner:
  # db: "{{ db_name }}"
  #new_owner: "{{ db_user }}"


- name: Create test_table
  postgresql_table:
    db: "{{ db_name }}"
    owner: "{{ db_name }}"
    name: test_table
    columns:
    - id bigserial primary key
    - num bigint
    - stories text
  become_user: postgres











  #- name: "Load SQL script into a variable"
  #set_fact:
  #  migration_sql: "{{ lookup('file', 'conf/migration.sql') }}"

  #- name: "Execute script from variable"
  # command: "psql {{ db_name }} -c {{ migration_sql }}"
  # become_user: postgres
  #register: sql_response_variable
  #



       #- name: Add some dummy data to our database
       #  become: true
       #  become_user: postgres
       #  shell: psql {{ db_name }} < /tmp/dump.sql

